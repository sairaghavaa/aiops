# from flask import Flask, render_template
# app = Flask(__name__)

# @app.route('/')
# def home():
#     return render_template('index.html')

# # Add start and stop container routes here

# if __name__ == '__main__':
#     app.run(debug=True)



# import boto3
# from flask import Flask, request, render_template

# app = Flask(__name__)
# ecs_client = boto3.client('ecs')

# @app.route('/start', methods=['POST'])
# def start_container():
#     ecs_client.update_service(
#         cluster='demo-cluster',
#         service='demo-api-service',
#         desiredCount=1  # Adjust based on your needs
#     )
#     return render_template('index.html', message='Container started successfully!')

# @app.route('/stop', methods=['POST'])
# def stop_container():
#     ecs_client.update_service(
#         cluster='demo-cluster',
#         service='demo-api-service',
#         desiredCount=0
#     )
#     return render_template('index.html', message='Container stopped successfully!')

# @app.route('/')
# def home():
#     return render_template('index.html')

# if __name__ == '__main__':
#     app.run(debug=True)


# import requests
# from flask import Flask, render_template, redirect, url_for
# from flask_login import login_required
# # from app import app

# # Assuming these are your API Gateway URLs for the Lambda functions
# START_CONTAINER_URL = 'https://pa9w1q70s4.execute-api.us-east-1.amazonaws.com/as/path'
# STOP_CONTAINER_URL = 'https://example.com/stop-container'

# @app.route('/start', methods=['POST'])
# @login_required
# def start_container():
#     # Invoke the Lambda function via API Gateway to start the container
#     response = requests.post(START_CONTAINER_URL)
#     if response.status_code == 200:
#         # Handle successful container start
#         return redirect(url_for('index', message='Container started successfully!'))
#     else:
#         # Handle errors
#         return redirect(url_for('index', message='Failed to start container.'))

# @app.route('/stop', methods=['POST'])
# @login_required
# def stop_container():
#     # Invoke the Lambda function via API Gateway to stop the container
#     response = requests.post(STOP_CONTAINER_URL)
#     if response.status_code == 200:
#         # Handle successful container stop
#         return redirect(url_for('index', message='Container stopped successfully!'))
#     else:
#         # Handle errors
#         return redirect(url_for('index', message='Failed to stop container.'))

# @app.route('/')
# @login_required
# def index():
#     # You might want to pass a message parameter to render_template if using it
#     return render_template('index.html')


# from flask import Flask, render_template, request, redirect, url_for
# import requests

# app = Flask(__name__)

# # Assuming these are your API Gateway URLs for the Lambda functions
# START_CONTAINER_URL = 'https://pa9w1q70s4.execute-api.us-east-1.amazonaws.com/as/path'
# STOP_CONTAINER_URL = 'https://example.com/stop-container'

# @app.route('/')
# def index():
#     # The message parameter can be used to display operation results if needed.
#     message = request.args.get('message')
#     return render_template('index.html', message=message)

# @app.route('/start', methods=['POST'])
# def start_container():
#     response = requests.post(START_CONTAINER_URL)
#     if response.status_code == 200:
#         return redirect(url_for('index', message='Container started successfully!'))
#     else:
#         return redirect(url_for('index', message='Failed to start container.'))

# @app.route('/stop', methods=['POST'])
# def stop_container():
#     response = requests.post(STOP_CONTAINER_URL)
#     if response.status_code == 200:
#         return redirect(url_for('index', message='Container stopped successfully!'))
#     else:
#         return redirect(url_for('index', message='Failed to stop container.'))

# if __name__ == '__main__':
#     app.run(debug=True)


# from flask import Flask, render_template, redirect, url_for
# import requests

# app = Flask(__name__)

# # Assuming these are your API Gateway URLs for the Lambda functions
# START_CONTAINER_URL = 'https://pa9w1q70s4.execute-api.us-east-1.amazonaws.com/as/path'
# STOP_CONTAINER_URL = 'https://example.com/stop-container'

# @app.route('/')
# def index():
#     return render_template('index.html')

# @app.route('/start', methods=['GET'])
# def start_container():
#     # Making a GET request to start the container
#     response = requests.get(START_CONTAINER_URL)
#     if response.status_code == 200:
#         return redirect(url_for('index', message='Container started successfully!'))
#     else:
#         return redirect(url_for('index', message='Failed to start container.'))

# @app.route('/stop', methods=['GET'])
# def stop_container():
#     # Making a GET request to stop the container
#     response = requests.get(STOP_CONTAINER_URL)
#     if response.status_code == 200:
#         return redirect(url_for('index', message='Container stopped successfully!'))
#     else:
#         return redirect(url_for('index', message='Failed to stop container.'))

# if __name__ == '__main__':
#     app.run(debug=True)



# from flask import Flask, render_template, request, redirect, url_for
# import requests

# app = Flask(__name__)

# # Example API Gateway URLs for invoking Lambda functions
# START_CONTAINER_URL = 'https://example.com/start'
# STOP_CONTAINER_URL = 'https://example.com/stop'

# @app.route('/', methods=['GET', 'POST'])
# def index():
#     message = ''
#     if request.method == 'POST':
#         if 'start' in request.form:
#             response = requests.post(START_CONTAINER_URL, json={})  # Add necessary payload
#             message = 'Starting container...'
#         elif 'stop' in request.form:
#             response = requests.post(STOP_CONTAINER_URL, json={})  # Add necessary payload
#             message = 'Stopping container...'
#     return render_template('index.html', message=message)

# if __name__ == '__main__':
#     app.run(debug=True)


# from flask import Flask, render_template, request, redirect, url_for, flash
# from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user

# app = Flask(__name__)
# app.secret_key = 'your_secret_key'

# login_manager = LoginManager()
# login_manager.init_app(app)
# login_manager.login_view = 'login'

# # Simplified user store and User class
# users = {'user1': {'password': 'password1'}}
# class User(UserMixin):
#     pass

# @login_manager.user_loader
# def user_loader(username):
#     if username not in users:
#         return
#     user = User()
#     user.id = username
#     return user

# @app.route('/login', methods=['GET', 'POST'])
# def login():
#     if request.method == 'POST':
#         username = request.form['username']
#         password = request.form['password']
#         if username in users and users[username]['password'] == password:
#             user = User()
#             user.id = username
#             login_user(user)
#             return redirect(url_for('dashboard'))
#         else:
#             flash('Invalid username or password')
#     return render_template('login.html')

# @app.route('/register', methods=['GET', 'POST'])
# def register():
#     if request.method == 'POST':
#         # Simplified registration logic
#         users[request.form['username']] = {'password': request.form['password']}
#         return redirect(url_for('login'))
#     return render_template('register.html')

# @app.route('/dashboard')
# @login_required
# def dashboard():
#     return render_template('dashboard.html')

# @app.route('/logout')
# def logout():
#     logout_user()
#     return redirect(url_for('login'))

# @app.route('/', methods=['GET', 'POST'])
# @login_required
# def index():
#     message = ''
#     if request.method == 'POST':
#         if 'start' in request.form:
#             # Trigger start container logic
#             message = 'Starting container...'
#         elif 'stop' in request.form:
#             # Trigger stop container logic
#             message = 'Stopping container...'
#     return render_template('index.html', message=message)

# if __name__ == '__main__':
#     app.run(debug=True)


#login register and start stop container

# from flask import Flask, render_template, request, redirect, url_for, flash, session
# import requests

# app = Flask(__name__)
# app.secret_key = 'your_secret_key'

# # Replace these URLs with your actual API Gateway URLs
# START_CONTAINER_URL = 'https://example.com/start'
# STOP_CONTAINER_URL = 'https://example.com/stop'

# # Placeholder for user storage (consider using a database in production)
# users = {'admin': 'password'}

# @app.route('/', methods=['GET'])
# def index():
#     if 'username' in session:
#         return render_template('index.html')
#     else:
#         return redirect(url_for('login'))

# @app.route('/login', methods=['GET', 'POST'])
# def login():
#     if request.method == 'POST':
#         username = request.form['username']
#         password = request.form['password']
#         if username in users and users[username] == password:
#             session['username'] = username
#             return redirect(url_for('index'))
#         else:
#             flash('Invalid username or password')
#     return render_template('login.html')

# @app.route('/logout')
# def logout():
#     session.pop('username', None)
#     return redirect(url_for('login'))

# @app.route('/register', methods=['GET', 'POST'])
# def register():
#     if request.method == 'POST':
#         username = request.form['username']
#         password = request.form['password']
#         # Simple validation
#         if not (username and password):
#             flash('Username and password are required')
#         elif username in users:
#             flash('Username already exists')
#         else:
#             users[username] = password
#             flash('User registered successfully. Please login.')
#             return redirect(url_for('login'))
#     return render_template('register.html')

# @app.route('/start', methods=['POST'])
# def start_container():
#     if 'username' in session:
#         # Add necessary payload or headers based on your Lambda configuration
#         response = requests.post(START_CONTAINER_URL, json={})
#         flash('Starting container...')
#     else:
#         flash('You are not authorized to perform this action')
#     return redirect(url_for('index'))

# @app.route('/stop', methods=['POST'])
# def stop_container():
#     if 'username' in session:
#         # Add necessary payload or headers based on your Lambda configuration
#         response = requests.post(STOP_CONTAINER_URL, json={})
#         flash('Stopping container...')
#     else:
#         flash('You are not authorized to perform this action')
#     return redirect(url_for('index'))

# if __name__ == '__main__':
#     app.run(debug=True)